Lignes d'une classe : toutes les lignes, des import et package, s'il y en a, jusqu'au } final
Lignes d'une méthode : toutes les lignes, de la définition au } final
Un commentaire qui est situé avant une méthode doit être collé à la méthode sans espace vide entre pour être considéré comme un commentaire de la méthode.
Les commentaires d'une méthode sont situés directement avant la méthode, ou à l'intérieur des {} ou sur la même ligne que le } final.
Idem pour les classes.

Les lignes commençants par @ sont considérées comme des commentaires
On peut avoir un commentaire d'une seule ligne après le } de fin de classe et de fin de méthode, sur la même ligne que le } final

On suppose que le programme java suit les conventions. Par exemple, public void test(int a) {for(i=1; i <100; i++) a++;} serait écrit comme :
public void test(int a) {
	for(i=1; i <100; i++) a++;
}

Enum est considéré comme une classe.
Une méthode imbriqué dans une méthode (par exemple avec @override) est considéré comme une ligne de code de la méthode qui l'englobe
Si le enum est sur une seule ligne, la ligne sera compté dans le nombre de ligne de la classe (ou de la méthode) (=1)

Pour les ratios comme classe_BC, dans le cas ou le classe_DC = 0 et/ou WMC = 0, nous avons laissé les valeurs NaN et Infinity.
Nous ne voulions pas forcer un classe_BC de 0 car cela représente mal la situation. S'il n'y a aucun commentaire et aucune classe (exemple enum),
un classe_BC de 0 reflète pas la situation. La densité n'est pas mauvaise, la métrique n'a juste pas vraiment de sens.


Partie 3
* Complexité cyclomatique de McCab :
V(F) = 1 + d où d est le nombre de noeuds prédicats
Noeuds prédicats = noeud avec au moins 2 sorties
** if a then A (conditional structure) + 1
** if a then A else B (conditional structure) +1
** if a then A else if B then B else C +2
** switch case (+ 1 per case or default block) +1 par case
** while a do A (iterative structure) +1
** repeat a until A (iterative structure) +1
(boolean condition) (throw, try, catch) ignoré
https://www.theserverside.com/feature/How-to-calculate-McCabe-cyclomatic-complexity-in-Java

* Weighted methods per class
Somme de la complexité cyclomatique de chaque méthode implantée de la classe
